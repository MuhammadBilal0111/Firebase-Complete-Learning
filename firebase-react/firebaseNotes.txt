// Firebase Authentication Notes

### Authentication
- `getAuth()` is used to authenticate users.

### Firestore Setup
- Open Firebase Data Store and click on "Start with Test Mode."
- Import `collection` function and `addDoc` to add documents.
  ```javascript
  collection(database, <collectionName>)
  ```
- To add data to Firestore:
  ```javascript
  addDoc(collectionRef, dataToSubmit)
  ```
  - Returns a promise of confirmation or error.

### Fetching Data
- Use `getDocs` to retrieve data from Firestore.
  ```javascript
  getDocs(collectionRef)
  ```
  - Returns a promise with the response.

### Updating Data
- Use `doc` and `updateDoc` for updates:
  ```javascript
  doc(database, collectionName, id)
  updateDoc(docToUpdate, <data>)
  ```
  - Updates a specific document in Firestore.

### Storing Files
- Import `getStorage` to store files in Firebase.
- To store an image:
  ```javascript
  const storageRef = ref(storage, image_name);
  ```
- Use `uploadBytesResumable` and `getDownloadUrl` when downloading files from Firebase.
  ```javascript
  uploadTask.on("state_change", (snapshot) => {}, (error) => {}, (complete) => {});
  ```
- Set rules for image storage, e.g., "write" for inserting an image.

### Real-Time Updates
- Use `onSnapshot` for real-time updates:
  ```javascript
  onSnapshot(collectionRef, (snapshot) => {
    // Handle updates
  });
  ```

### Firestore Queries
- Retrieve specific data using queries:
  ```javascript
  query(collectionRef, where("field", "==", value))
  ```
  - `where()` is used for filtering.

### Firebase Hosting
1. Install the Firebase CLI:
   ```bash
   npm i -g firebase-tools
   ```
2. Log in to Firebase:
   ```bash
   firebase login:ci
   firebase login
   ```
3. Initialize the project:
   ```bash
   firebase init
   ```
4. Deploy the project:
   ```bash
   firebase deploy
   ```

### Security in Firebase
#### Rules Example
- Set up Firestore rules for security:
  ```javascript
  rules_version = '2';

  service cloud.firestore {
    match /databases/{database}/documents {
      match /{document=**} {
        allow write: if request.time < timestamp.date(2025, 1, 31) && request.auth != null;
        allow read;
      }
    }
  }
  ```
- Example to restrict writing:
  ```javascript
  service cloud.firestore {
    match /databases/{database}/documents {
      match /{document=**} {
        allow write: if false; // Writing is disabled even for authenticated users.
        allow read;
      }
    }
  }
  ```
- Authenticated users can write after logging in.

### Authentication State
- Use `onAuthStateChanged` to monitor user authentication state.

